"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const src_1 = require("../src");
const utils_1 = require("./utils");
describe('Use case: Parsing HTTP headers', () => {
    it('allows parsing http headers using loopStream and then reading body', async () => {
        const request = new stream_1.PassThrough({ encoding: 'utf-8' });
        const headersPromised = readHttpHeaders(request);
        request.write('Content-Type: application/json\r\nCo');
        await utils_1.sleep(50);
        request.write('nnection: keep-alive\r\n');
        await utils_1.sleep(50);
        request.write('\r\n{"name": "Jakob"}');
        await utils_1.sleep(50);
        request.end();
        const headers = await headersPromised;
        let bodyStr = '';
        for await (const bodyChunk of request)
            bodyStr += bodyChunk;
        const body = JSON.parse(bodyStr);
        expect(headers).toEqual({
            'Content-Type': 'application/json',
            Connection: 'keep-alive',
        });
        expect(body).toEqual({
            name: 'Jakob',
        });
    });
});
async function readHttpHeaders(stream) {
    const readHeadersStr = await src_1.loopStream(stream, '', (chunk, acc) => {
        acc += chunk;
        const headEndSeqIndex = acc.indexOf('\r\n\r\n');
        if (headEndSeqIndex === -1) {
            return { action: 'continue', acc };
        }
        const rawHeaders = acc.slice(0, headEndSeqIndex);
        const bodyBeginning = acc.slice(headEndSeqIndex + '\r\n\r\n'.length);
        return {
            action: 'break',
            acc: rawHeaders,
            unconsumedData: bodyBeginning,
        };
    });
    return readHeadersStr
        .split('\r\n')
        .map(headerStr => headerStr.split(': '))
        .reduce((obj, [key, val]) => ({ ...obj, [key]: val }), {});
}
//# sourceMappingURL=parse-http-headers.spec.js.map